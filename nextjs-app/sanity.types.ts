/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type CallToAction = {
  _type: "callToAction";
  heading: string;
  text?: string;
  buttonText?: string;
  link?: Link;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "page" | "post";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  openInNewTab?: boolean;
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type ProjectCategory = {
  _id: string;
  _type: "projectCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description?: string;
  color?: string;
  icon: string;
  order: number;
  featured?: boolean;
  active?: boolean;
};

export type Technology = {
  _id: string;
  _type: "technology";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  category: "frontend" | "backend" | "database" | "devops" | "design" | "mobile" | "analytics" | "language" | "creative" | "other";
  description?: string;
  color?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  website?: string;
  featured?: boolean;
};

export type PortfolioProject = {
  _id: string;
  _type: "portfolioProject";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  category: "coding" | "photography" | "creative" | "data" | "animation" | "design";
  shortDescription: string;
  description?: BlockContent;
  heroMedia: {
    type?: "image" | "video" | "gallery";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    video?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    gallery?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
  };
  gallery?: Array<{
    asset?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    caption?: string;
    alt: string;
    _key: string;
  }>;
  technicalDetails?: {
    technologies?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "technology";
    }>;
    githubUrl?: string;
    liveUrl?: string;
    codeSnippet?: string;
    cameraInfo?: {
      camera?: string;
      lens?: string;
      settings?: string;
      location?: string;
      shootDate?: string;
    };
    photoCategory?: "portrait" | "landscape" | "street" | "studio" | "event" | "architecture" | "nature";
    dataTools?: Array<string>;
    datasetInfo?: string;
    methodology?: string;
    creativeTools?: Array<string>;
    duration?: string;
  };
  featured?: boolean;
  tags?: Array<string>;
  completionDate?: string;
  client?: string;
  status?: "completed" | "in-progress" | "on-hold" | "archived";
  seoTitle?: string;
  seoDescription?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  heading: string;
  subheading?: string;
  pageBuilder?: Array<{
    _key: string;
  } & CallToAction | {
    _key: string;
  } & InfoSection>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  content?: BlockContent;
  excerpt?: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName: string;
  lastName: string;
  picture: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = CallToAction | Link | InfoSection | BlockContent | ProjectCategory | Technology | PortfolioProject | Page | Post | Person | Settings | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
} | null;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "callToAction" => {          link {      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }      },      },      _type == "infoSection" => {        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }          }        }      },    },  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  name: string;
  slug: Slug;
  heading: string;
  subheading: string | null;
  pageBuilder: Array<{
    _key: string;
    _type: "callToAction";
    heading: string;
    text?: string;
    buttonText?: string;
    link: {
      _type: "link";
      linkType?: "href" | "page" | "post";
      href?: string;
      page: string | null;
      post: string | null;
      openInNewTab?: boolean;
    } | null;
  } | {
    _key: string;
    _type: "infoSection";
    heading?: string;
    subheading?: string;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page: string | null;
        post: string | null;
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  }> | null;
} | null;
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<{
  slug: string;
  _type: "page";
  _updatedAt: string;
} | {
  slug: string;
  _type: "post";
  _updatedAt: string;
}>;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type AllPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type MorePostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,    markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page: string | null;
      post: string | null;
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: paginatedPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [$offset...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PaginatedPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: totalPostsCountQuery
// Query: count(*[_type == "post" && defined(slug.current)])
export type TotalPostsCountQueryResult = number;
// Variable: portfolioProjectsQuery
// Query: *[_type == "portfolioProject"     && ($category == null || category == $category)    && ($featured == null || featured == $featured)    && ($technologies == null || count(technicalDetails.technologies[]->name[@ in $technologies]) > 0)    && ($search == null || title match $search + "*" || shortDescription match $search + "*" || tags[] match $search + "*")  ] | order(featured desc, completionDate desc, _createdAt desc) [$offset...$limit] {      _id,  title,  "slug": slug.current,  category,  shortDescription,  "heroImage": heroMedia.image,  "heroVideo": heroMedia.video,  "heroGallery": heroMedia.gallery,  "mediaType": heroMedia.type,  featured,  tags,  completionDate,  client,  status,  technicalDetails,  "technologies": technicalDetails.technologies[]->{ name, color, icon },  _createdAt,  _updatedAt  }
export type PortfolioProjectsQueryResult = Array<{
  _id: string;
  title: string;
  slug: string;
  category: "animation" | "coding" | "creative" | "data" | "design" | "photography";
  shortDescription: string;
  heroImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  heroVideo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  } | null;
  heroGallery: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mediaType: "gallery" | "image" | "video" | null;
  featured: boolean | null;
  tags: Array<string> | null;
  completionDate: string | null;
  client: string | null;
  status: "archived" | "completed" | "in-progress" | "on-hold" | null;
  technicalDetails: {
    technologies?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "technology";
    }>;
    githubUrl?: string;
    liveUrl?: string;
    codeSnippet?: string;
    cameraInfo?: {
      camera?: string;
      lens?: string;
      settings?: string;
      location?: string;
      shootDate?: string;
    };
    photoCategory?: "architecture" | "event" | "landscape" | "nature" | "portrait" | "street" | "studio";
    dataTools?: Array<string>;
    datasetInfo?: string;
    methodology?: string;
    creativeTools?: Array<string>;
    duration?: string;
  } | null;
  technologies: Array<{
    name: string;
    color: string | null;
    icon: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    } | null;
  }> | null;
  _createdAt: string;
  _updatedAt: string;
}>;
// Variable: featuredPortfolioProjectsQuery
// Query: *[_type == "portfolioProject" && featured == true]   | order(completionDate desc, _createdAt desc) [0...6] {      _id,  title,  "slug": slug.current,  category,  shortDescription,  "heroImage": heroMedia.image,  "heroVideo": heroMedia.video,  "heroGallery": heroMedia.gallery,  "mediaType": heroMedia.type,  featured,  tags,  completionDate,  client,  status,  technicalDetails,  "technologies": technicalDetails.technologies[]->{ name, color, icon },  _createdAt,  _updatedAt  }
export type FeaturedPortfolioProjectsQueryResult = Array<{
  _id: string;
  title: string;
  slug: string;
  category: "animation" | "coding" | "creative" | "data" | "design" | "photography";
  shortDescription: string;
  heroImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  heroVideo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  } | null;
  heroGallery: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mediaType: "gallery" | "image" | "video" | null;
  featured: boolean | null;
  tags: Array<string> | null;
  completionDate: string | null;
  client: string | null;
  status: "archived" | "completed" | "in-progress" | "on-hold" | null;
  technicalDetails: {
    technologies?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "technology";
    }>;
    githubUrl?: string;
    liveUrl?: string;
    codeSnippet?: string;
    cameraInfo?: {
      camera?: string;
      lens?: string;
      settings?: string;
      location?: string;
      shootDate?: string;
    };
    photoCategory?: "architecture" | "event" | "landscape" | "nature" | "portrait" | "street" | "studio";
    dataTools?: Array<string>;
    datasetInfo?: string;
    methodology?: string;
    creativeTools?: Array<string>;
    duration?: string;
  } | null;
  technologies: Array<{
    name: string;
    color: string | null;
    icon: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    } | null;
  }> | null;
  _createdAt: string;
  _updatedAt: string;
}>;
// Variable: portfolioProjectQuery
// Query: *[_type == "portfolioProject" && slug.current == $slug][0] {      _id,  title,  "slug": slug.current,  category,  shortDescription,  "heroImage": heroMedia.image,  "heroVideo": heroMedia.video,  "heroGallery": heroMedia.gallery,  "mediaType": heroMedia.type,  featured,  tags,  completionDate,  client,  status,  technicalDetails,  "technologies": technicalDetails.technologies[]->{ name, color, icon },  _createdAt,  _updatedAt,    description,    "heroMedia": heroMedia {      type,      image,      video,      gallery[] {        asset,        alt,        caption      }    },    "relatedProjects": *[_type == "portfolioProject"       && category == ^.category       && _id != ^._id       && featured == true]     | order(completionDate desc) [0...3] {      _id,      title,      "slug": slug.current,      "heroImage": heroMedia.image,      shortDescription,      category    }  }
export type PortfolioProjectQueryResult = {
  _id: string;
  title: string;
  slug: string;
  category: "animation" | "coding" | "creative" | "data" | "design" | "photography";
  shortDescription: string;
  heroImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  heroVideo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  } | null;
  heroGallery: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mediaType: "gallery" | "image" | "video" | null;
  featured: boolean | null;
  tags: Array<string> | null;
  completionDate: string | null;
  client: string | null;
  status: "archived" | "completed" | "in-progress" | "on-hold" | null;
  technicalDetails: {
    technologies?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "technology";
    }>;
    githubUrl?: string;
    liveUrl?: string;
    codeSnippet?: string;
    cameraInfo?: {
      camera?: string;
      lens?: string;
      settings?: string;
      location?: string;
      shootDate?: string;
    };
    photoCategory?: "architecture" | "event" | "landscape" | "nature" | "portrait" | "street" | "studio";
    dataTools?: Array<string>;
    datasetInfo?: string;
    methodology?: string;
    creativeTools?: Array<string>;
    duration?: string;
  } | null;
  technologies: Array<{
    name: string;
    color: string | null;
    icon: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    } | null;
  }> | null;
  _createdAt: string;
  _updatedAt: string;
  description: BlockContent | null;
  heroMedia: {
    type: "gallery" | "image" | "video" | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    video: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    } | null;
    gallery: Array<{
      asset: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      } | null;
      alt: string | null;
      caption: null;
    }> | null;
  };
  relatedProjects: Array<{
    _id: string;
    title: string;
    slug: string;
    heroImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    shortDescription: string;
    category: "animation" | "coding" | "creative" | "data" | "design" | "photography";
  }>;
} | null;
// Variable: portfolioCategoryCountsQuery
// Query: {    "coding": count(*[_type == "portfolioProject" && category == "coding"]),    "photography": count(*[_type == "portfolioProject" && category == "photography"]),    "creative": count(*[_type == "portfolioProject" && category == "creative"]),    "data": count(*[_type == "portfolioProject" && category == "data"]),    "animation": count(*[_type == "portfolioProject" && category == "animation"]),    "design": count(*[_type == "portfolioProject" && category == "design"]),    "total": count(*[_type == "portfolioProject"])  }
export type PortfolioCategoryCountsQueryResult = {
  coding: number;
  photography: number;
  creative: number;
  data: number;
  animation: number;
  design: number;
  total: number;
};
// Variable: portfolioTechnologiesQuery
// Query: *[_type == "technology"] | order(name asc) {    _id,    name,    category,    color,    "projectCount": count(*[_type == "portfolioProject" && references(^._id)])  }
export type PortfolioTechnologiesQueryResult = Array<{
  _id: string;
  name: string;
  category: "analytics" | "backend" | "creative" | "database" | "design" | "devops" | "frontend" | "language" | "mobile" | "other";
  color: string | null;
  projectCount: number;
}>;
// Variable: totalPortfolioProjectsCountQuery
// Query: count(*[_type == "portfolioProject"     && ($category == null || category == $category)    && ($featured == null || featured == $featured)    && ($technologies == null || count(technicalDetails.technologies[]->name[@ in $technologies]) > 0)    && ($search == null || title match $search + "*" || shortDescription match $search + "*" || tags[] match $search + "*")  ])
export type TotalPortfolioProjectsCountQueryResult = number;
// Variable: portfolioProjectSlugs
// Query: *[_type == "portfolioProject" && defined(slug.current)]  {"slug": slug.current}
export type PortfolioProjectSlugsResult = Array<{
  slug: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    \"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == \"callToAction\" => {\n        \n  link {\n      ...,\n      \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n      }\n,\n      },\n      _type == \"infoSection\" => {\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n          }\n        }\n      },\n    },\n  }\n": GetPageQueryResult;
    "\n  *[_type == \"page\" || _type == \"post\" && defined(slug.current)] | order(_type asc) {\n    \"slug\": slug.current,\n    _type,\n    _updatedAt,\n  }\n": SitemapDataResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": AllPostsQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": MorePostsQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    markDefs[]{\n      ...,\n      \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": PostQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PostPagesSlugsResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PagesSlugsResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) [$offset...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": PaginatedPostsQueryResult;
    "\n  count(*[_type == \"post\" && defined(slug.current)])\n": TotalPostsCountQueryResult;
    "\n  *[_type == \"portfolioProject\" \n    && ($category == null || category == $category)\n    && ($featured == null || featured == $featured)\n    && ($technologies == null || count(technicalDetails.technologies[]->name[@ in $technologies]) > 0)\n    && ($search == null || title match $search + \"*\" || shortDescription match $search + \"*\" || tags[] match $search + \"*\")\n  ] | order(featured desc, completionDate desc, _createdAt desc) [$offset...$limit] {\n    \n  _id,\n  title,\n  \"slug\": slug.current,\n  category,\n  shortDescription,\n  \"heroImage\": heroMedia.image,\n  \"heroVideo\": heroMedia.video,\n  \"heroGallery\": heroMedia.gallery,\n  \"mediaType\": heroMedia.type,\n  featured,\n  tags,\n  completionDate,\n  client,\n  status,\n  technicalDetails,\n  \"technologies\": technicalDetails.technologies[]->{ name, color, icon },\n  _createdAt,\n  _updatedAt\n\n  }\n": PortfolioProjectsQueryResult;
    "\n  *[_type == \"portfolioProject\" && featured == true] \n  | order(completionDate desc, _createdAt desc) [0...6] {\n    \n  _id,\n  title,\n  \"slug\": slug.current,\n  category,\n  shortDescription,\n  \"heroImage\": heroMedia.image,\n  \"heroVideo\": heroMedia.video,\n  \"heroGallery\": heroMedia.gallery,\n  \"mediaType\": heroMedia.type,\n  featured,\n  tags,\n  completionDate,\n  client,\n  status,\n  technicalDetails,\n  \"technologies\": technicalDetails.technologies[]->{ name, color, icon },\n  _createdAt,\n  _updatedAt\n\n  }\n": FeaturedPortfolioProjectsQueryResult;
    "\n  *[_type == \"portfolioProject\" && slug.current == $slug][0] {\n    \n  _id,\n  title,\n  \"slug\": slug.current,\n  category,\n  shortDescription,\n  \"heroImage\": heroMedia.image,\n  \"heroVideo\": heroMedia.video,\n  \"heroGallery\": heroMedia.gallery,\n  \"mediaType\": heroMedia.type,\n  featured,\n  tags,\n  completionDate,\n  client,\n  status,\n  technicalDetails,\n  \"technologies\": technicalDetails.technologies[]->{ name, color, icon },\n  _createdAt,\n  _updatedAt\n,\n    description,\n    \"heroMedia\": heroMedia {\n      type,\n      image,\n      video,\n      gallery[] {\n        asset,\n        alt,\n        caption\n      }\n    },\n    \"relatedProjects\": *[_type == \"portfolioProject\" \n      && category == ^.category \n      && _id != ^._id \n      && featured == true] \n    | order(completionDate desc) [0...3] {\n      _id,\n      title,\n      \"slug\": slug.current,\n      \"heroImage\": heroMedia.image,\n      shortDescription,\n      category\n    }\n  }\n": PortfolioProjectQueryResult;
    "\n  {\n    \"coding\": count(*[_type == \"portfolioProject\" && category == \"coding\"]),\n    \"photography\": count(*[_type == \"portfolioProject\" && category == \"photography\"]),\n    \"creative\": count(*[_type == \"portfolioProject\" && category == \"creative\"]),\n    \"data\": count(*[_type == \"portfolioProject\" && category == \"data\"]),\n    \"animation\": count(*[_type == \"portfolioProject\" && category == \"animation\"]),\n    \"design\": count(*[_type == \"portfolioProject\" && category == \"design\"]),\n    \"total\": count(*[_type == \"portfolioProject\"])\n  }\n": PortfolioCategoryCountsQueryResult;
    "\n  *[_type == \"technology\"] | order(name asc) {\n    _id,\n    name,\n    category,\n    color,\n    \"projectCount\": count(*[_type == \"portfolioProject\" && references(^._id)])\n  }\n": PortfolioTechnologiesQueryResult;
    "\n  count(*[_type == \"portfolioProject\" \n    && ($category == null || category == $category)\n    && ($featured == null || featured == $featured)\n    && ($technologies == null || count(technicalDetails.technologies[]->name[@ in $technologies]) > 0)\n    && ($search == null || title match $search + \"*\" || shortDescription match $search + \"*\" || tags[] match $search + \"*\")\n  ])\n": TotalPortfolioProjectsCountQueryResult;
    "\n  *[_type == \"portfolioProject\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PortfolioProjectSlugsResult;
  }
}
